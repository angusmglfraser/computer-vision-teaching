{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/vision.js","webpack:///./js/MovingAverageBackgroundSubtraction.js","webpack:///./js/RGBImage.js","webpack:///./js/entry/canny.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","RGBImage_1","RGBImage","EdgeStrength","MovingAverageBackgroundSubtraction_1","greyscaleConvolve","image","kernel","kernelWidth","kernelHeight","width","getWidth","height","getHeight","output","fromDimensions","offsetX","Math","floor","offsetY","x","y","acc","kx","ky","abs","g","b","convolve1d","intermediate","offset","length","raccumulator","gaccumulator","baccumulator","combineConvolutions","image1","image2","r1","r2","g1","g2","b1","b2","sqrt","MovingAverageBackgroundSubtractor","gaussKernel","gauss1d","sobelX","sobelY","getImageFromCanvas","canvas","fromImageData","getContext","getImageData","getImageFromVideo","videoElement","scale","videoWidth","videoHeight","drawImage","convolve","initCamera","navigator","mediaDevices","getUserMedia","video","then","stream","webcamElement","document","getElementById","srcObject","addEventListener","event","canvases","getElementsByTagName","catch","err","errType","alertString","alert","getForeground","backgroundModel","threshold","greyScale","imageGreyscale","foreground","getBackground","background","imageDiff","result","rdiff","gdiff","bdiff","getCannyEdges","threshold1","threshold2","blurred","gx","gy","strengths","STRONG_EDGE","WEAK_EDGE","isEdge","val","blobx","bloby","hysteresis","Array","upper","max","lower","min","NO_EDGE","dualThresholding","angles","angle","edgeThinning","atan2","PI","computeEdgeAngles","__importStar","this","mod","k","Vision","size","buffer","DLinkedList","capacity","currentBackground","addFrame","getSize","add","tempModel","clone","toRemove","removeFirstNode","getBackgroundModel","setBufferSize","num","recalculateBackgroundModel","iter","DLinkedListIterator","hasNext","frame","next","buf","currentNode","getFirstNode","undefined","res","data","obj","first","Node","last","previous","removeLastNode","getLastNode","getIndex","index","asImageData","ImageData","draw","putImageData","avg","animating","computeFrame","inputImage","requestAnimationFrame"],"mappings":"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","file":"canny.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RGBImage_1 = require(\"./RGBImage\");\r\nexports.RGBImage = RGBImage_1.RGBImage;\r\nvar MovingAverageBackgroundSubtraction_1 = require(\"./MovingAverageBackgroundSubtraction\");\r\nexports.MovingAverageBackgroundSubtractor = MovingAverageBackgroundSubtraction_1.MovingAverageBackgroundSubtractor;\r\nexports.gaussKernel = [\r\n    [1 / 273, 4 / 273, 7 / 273, 4 / 273, 1 / 273],\r\n    [4 / 273, 16 / 273, 26 / 273, 16 / 273, 4 / 273],\r\n    [7 / 273, 26 / 273, 41 / 273, 26 / 273, 7 / 273],\r\n    [4 / 273, 16 / 273, 26 / 273, 16 / 273, 4 / 273],\r\n    [1 / 273, 4 / 273, 7 / 273, 4 / 273, 1 / 273]\r\n];\r\nexports.gauss1d = [0.06136, 0.24477, 0.38774, 0.24477, 0.06136];\r\nexports.sobelX = [\r\n    [1, 0, -1],\r\n    [2, 0, -2],\r\n    [1, 0, -1]\r\n];\r\nexports.sobelY = [\r\n    [1, 2, 1],\r\n    [0, 0, 0],\r\n    [-1, -2, -1]\r\n];\r\nvar EdgeStrength;\r\n(function (EdgeStrength) {\r\n    EdgeStrength[EdgeStrength[\"NO_EDGE\"] = 0] = \"NO_EDGE\";\r\n    EdgeStrength[EdgeStrength[\"WEAK_EDGE\"] = 1] = \"WEAK_EDGE\";\r\n    EdgeStrength[EdgeStrength[\"STRONG_EDGE\"] = 2] = \"STRONG_EDGE\";\r\n})(EdgeStrength || (EdgeStrength = {}));\r\n/**\r\n * Returns the current frame on a canvas\r\n * @param canvas\r\n */\r\nfunction getImageFromCanvas(canvas) {\r\n    return RGBImage_1.RGBImage.fromImageData(canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height));\r\n}\r\nexports.getImageFromCanvas = getImageFromCanvas;\r\n/**\r\n * Returns the current frame from a video element\r\n * @param videoElement the video element the frame is to be grabbed from\r\n * @param canvas the canvas on which the frame is to be drawn\r\n * @param scale the scaling factor. Default is 1\r\n */\r\nfunction getImageFromVideo(videoElement, canvas, scale) {\r\n    if (scale === void 0) { scale = 1; }\r\n    var width = videoElement.videoWidth * scale;\r\n    var height = videoElement.videoHeight * scale;\r\n    canvas.getContext('2d').drawImage(videoElement, 0, 0, width, height);\r\n    return RGBImage_1.RGBImage.fromImageData(canvas.getContext('2d').getImageData(0, 0, width, height));\r\n}\r\nexports.getImageFromVideo = getImageFromVideo;\r\n/**\r\n * Convolves an image with a kernel.\r\n * @param image The image to be convolved\r\n * @param kernel The convolution kernel\r\n * @param kernelWidth The width of the kernel\r\n * @param kernelHeight The height of the kernel\r\n */\r\nfunction convolve(image, kernel, kernelWidth, kernelHeight) {\r\n    var width = image.getWidth();\r\n    var height = image.getHeight();\r\n    var output = RGBImage_1.RGBImage.fromDimensions(width, height);\r\n    var offsetX = Math.floor(kernelWidth / 2);\r\n    var offsetY = Math.floor(kernelHeight / 2);\r\n    for (var x = 0; x < image.getWidth(); x++) {\r\n        for (var y = 0; y < image.getHeight(); y++) {\r\n            var raccumulator = 0;\r\n            var gaccumulator = 0;\r\n            var baccumulator = 0;\r\n            for (var kx = 0; kx < kernelWidth; kx++) {\r\n                for (var ky = 0; ky < kernelHeight; ky++) {\r\n                    raccumulator += kernel[kx][ky] * image.r[Math.abs(x + offsetX - kx) % width][Math.abs(y + offsetY - ky) % height];\r\n                    gaccumulator += kernel[kx][ky] * image.g[Math.abs(x + offsetX - kx) % width][Math.abs(y + offsetY - ky) % height];\r\n                    baccumulator += kernel[kx][ky] * image.b[Math.abs(x + offsetX - kx) % width][Math.abs(y + offsetY - ky) % height];\r\n                }\r\n            }\r\n            output.r[x][y] = raccumulator;\r\n            output.g[x][y] = gaccumulator;\r\n            output.b[x][y] = baccumulator;\r\n        }\r\n    }\r\n    return output;\r\n}\r\nexports.convolve = convolve;\r\n/**\r\n * The same as a normal convolution except it only convolves one channel. Use this\r\n * with greyscale images, as it cuts out 2/3 of the unnecessary calculations\r\n * @param image the image to be convolved\r\n * @param kernel the kernel\r\n * @param kernelWidth the kernel's width\r\n * @param kernelHeight the kernel's height\r\n */\r\nfunction greyscaleConvolve(image, kernel, kernelWidth, kernelHeight) {\r\n    var width = image.getWidth();\r\n    var height = image.getHeight();\r\n    var output = RGBImage_1.RGBImage.fromDimensions(width, height);\r\n    var offsetX = Math.floor(kernelWidth / 2);\r\n    var offsetY = Math.floor(kernelHeight / 2);\r\n    for (var x = 0; x < width; x++) {\r\n        for (var y = 0; y < height; y++) {\r\n            var acc = 0;\r\n            for (var kx = 0; kx < kernelWidth; kx++) {\r\n                for (var ky = 0; ky < kernelHeight; ky++) {\r\n                    acc += kernel[kx][ky] * image.r[Math.abs(x + offsetX - kx) % width][Math.abs(y + offsetY - ky) % height];\r\n                }\r\n            }\r\n            output.r[x][y] = output.g[x][y] = output.b[x][y] = acc;\r\n        }\r\n    }\r\n    return output;\r\n}\r\nexports.greyscaleConvolve = greyscaleConvolve;\r\n/**\r\n * This function is to be used when convolving an image with a symmetrical kernel. The kernel passed\r\n * to this function has to be 1-dimensional. The image will then be convolved with the kernel in the\r\n * x-direction, and the result of that will be convolved with the same kernel in the y-direction.\r\n * Doing convolutions this way with symmetric kernels greatly reduces the number of calculations to be\r\n * done, so use this wherever possible.\r\n * @param image the image to be convolved\r\n * @param kernel the 1-dimensional kernel\r\n */\r\nfunction convolve1d(image, kernel) {\r\n    var output = RGBImage_1.RGBImage.fromDimensions(image.getWidth(), image.getHeight());\r\n    var intermediate = RGBImage_1.RGBImage.fromDimensions(image.getWidth(), image.getHeight());\r\n    var offset = Math.floor(kernel.length / 2);\r\n    //first convolution\r\n    for (var x = 0; x < image.getWidth(); x++) {\r\n        for (var y = 0; y < image.getHeight(); y++) {\r\n            var raccumulator = 0;\r\n            var gaccumulator = 0;\r\n            var baccumulator = 0;\r\n            for (var i = 0; i < kernel.length; i++) {\r\n                raccumulator += kernel[i] * image.r[Math.abs(x + offset - i) % image.getWidth()][y];\r\n                gaccumulator += kernel[i] * image.g[Math.abs(x + offset - i) % image.getWidth()][y];\r\n                baccumulator += kernel[i] * image.b[Math.abs(x + offset - i) % image.getWidth()][y];\r\n            }\r\n            intermediate.r[x][y] = Math.abs(raccumulator);\r\n            intermediate.g[x][y] = Math.abs(gaccumulator);\r\n            intermediate.b[x][y] = Math.abs(baccumulator);\r\n        }\r\n    }\r\n    //second convolution\r\n    for (var x = 0; x < image.getWidth(); x++) {\r\n        for (var y = 0; y < image.getHeight(); y++) {\r\n            var raccumulator = 0;\r\n            var gaccumulator = 0;\r\n            var baccumulator = 0;\r\n            for (var i = 0; i < kernel.length; i++) {\r\n                raccumulator += kernel[i] * intermediate.r[x][Math.abs(y + offset - i) % image.getHeight()];\r\n                gaccumulator += kernel[i] * intermediate.g[x][Math.abs(y + offset - i) % image.getHeight()];\r\n                baccumulator += kernel[i] * intermediate.b[x][Math.abs(y + offset - i) % image.getHeight()];\r\n            }\r\n            output.r[x][y] = Math.abs(raccumulator);\r\n            output.g[x][y] = Math.abs(gaccumulator);\r\n            output.b[x][y] = Math.abs(baccumulator);\r\n        }\r\n    }\r\n    return output;\r\n}\r\nexports.convolve1d = convolve1d;\r\n/**\r\n * Performs a pythagorean combination of two images. Each pixel in the output image\r\n * is equivalent to the sum of the squares of the corresponding pixel in the two\r\n * input images.\r\n * @param image1\r\n * @param image2\r\n */\r\nfunction combineConvolutions(image1, image2) {\r\n    var width = image1.getWidth();\r\n    var height = image1.getHeight();\r\n    var output = RGBImage_1.RGBImage.fromDimensions(width, height);\r\n    for (var x = 0; x < width; x++) {\r\n        for (var y = 0; y < width; y++) {\r\n            var r1 = image1.r[x][y];\r\n            var r2 = image2.r[x][y];\r\n            var g1 = image1.g[x][y];\r\n            var g2 = image2.g[x][y];\r\n            var b1 = image1.b[x][y];\r\n            var b2 = image2.b[x][y];\r\n            output.r[x][y] = Math.floor(Math.sqrt((r1 * r1) + (r2 * r2)));\r\n            output.g[x][y] = Math.floor(Math.sqrt((g1 * g1) + (g2 * g2)));\r\n            output.b[x][y] = Math.floor(Math.sqrt((b1 * b1) + (b2 * b2)));\r\n        }\r\n    }\r\n    return output;\r\n}\r\nexports.combineConvolutions = combineConvolutions;\r\n/**\r\n * Initialises the webcam and scales all canvases on the page to the dimensions of the camera's image\r\n */\r\nfunction initCamera() {\r\n    navigator.mediaDevices.getUserMedia({ video: true }).then(function (stream) {\r\n        var webcamElement = document.getElementById('webcam');\r\n        webcamElement.srcObject = stream;\r\n        webcamElement.addEventListener('playing', function (event) {\r\n            var canvases = document.getElementsByTagName('canvas');\r\n            for (var i = 0; i < canvases.length; i++) {\r\n                canvases[i].width = webcamElement.videoWidth;\r\n                canvases[i].height = webcamElement.videoHeight;\r\n            }\r\n        });\r\n    }).catch(function (err) {\r\n        var errType = err.name;\r\n        var alertString = errType;\r\n        switch (errType) {\r\n            case \"NotSupportedError\":\r\n                alertString += \"\\nIf you are using Google Chrome, try changing the 'http' at the start of the url to 'https', or using a different web browser, such as Firefox\";\r\n                break;\r\n            case \"NotReadableError\":\r\n                alertString += \"\\nPlease make sure that your webcam is connected and enabled, and not currently being used by another application.\";\r\n                break;\r\n            case \"NotAllowedError\":\r\n                return;\r\n        }\r\n        alert(alertString);\r\n    });\r\n}\r\nexports.initCamera = initCamera;\r\n/**\r\n * Performs a simple background subtraction with two images and returns the foreground\r\n * @param image the image being analyzed\r\n * @param backgroundModel the background frame\r\n * @param threshold the difference threshold\r\n */\r\nfunction getForeground(image, backgroundModel, threshold) {\r\n    backgroundModel = backgroundModel.greyScale();\r\n    var imageGreyscale = image.greyScale();\r\n    var foreground = RGBImage_1.RGBImage.fromDimensions(image.getWidth(), image.getHeight());\r\n    for (var x = 0; x < image.getWidth(); x++) {\r\n        for (var y = 0; y < image.getHeight(); y++) {\r\n            var diff = Math.abs(imageGreyscale.r[x][y] - backgroundModel.r[x][y]);\r\n            if (diff > threshold) {\r\n                foreground.r[x][y] = image.r[x][y];\r\n                foreground.g[x][y] = image.g[x][y];\r\n                foreground.b[x][y] = image.b[x][y];\r\n            }\r\n        }\r\n    }\r\n    return foreground;\r\n}\r\nexports.getForeground = getForeground;\r\n/**\r\n * Returns the background pixels from a background subtraction\r\n * @param image\r\n * @param backgroundModel\r\n * @param threshold\r\n */\r\nfunction getBackground(image, backgroundModel, threshold) {\r\n    backgroundModel = backgroundModel.greyScale();\r\n    var imageGreyscale = image.greyScale();\r\n    var background = RGBImage_1.RGBImage.fromDimensions(image.getWidth(), image.getHeight());\r\n    for (var x = 0; x < image.getWidth(); x++) {\r\n        for (var y = 0; y < image.getHeight(); y++) {\r\n            var diff = Math.abs(imageGreyscale.r[x][y] - backgroundModel.r[x][y]);\r\n            if (diff < threshold) {\r\n                background.r[x][y] = image.r[x][y];\r\n                background.g[x][y] = image.g[x][y];\r\n                background.b[x][y] = image.b[x][y];\r\n            }\r\n        }\r\n    }\r\n    return background;\r\n}\r\nexports.getBackground = getBackground;\r\n/**\r\n * Returns the difference mask of two images\r\n * @param background the background model\r\n * @param image the current image\r\n */\r\nfunction imageDiff(background, image) {\r\n    var result = RGBImage_1.RGBImage.fromDimensions(image.getWidth(), image.getHeight());\r\n    for (var x = 0; x < image.getWidth(); x++) {\r\n        for (var y = 0; y < image.getHeight(); y++) {\r\n            var rdiff = Math.abs(image.r[x][y] - background.r[x][y]);\r\n            var gdiff = Math.abs(image.g[x][y] - background.g[x][y]);\r\n            var bdiff = Math.abs(image.b[x][y] - background.b[x][y]);\r\n            result.r[x][y] = rdiff;\r\n            result.g[x][y] = gdiff;\r\n            result.b[x][y] = bdiff;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexports.imageDiff = imageDiff;\r\n/**\r\n * Calculates the angles of edges in degrees, based on edge gradients in the x and y directions\r\n * @param image1 The first image with gradients in the x direction\r\n * @param image2 The second image with gradients in the y direction\r\n */\r\nfunction computeEdgeAngles(image1, image2) {\r\n    var output = new Array(image1.getWidth());\r\n    for (var x = 0; x < image1.getWidth(); x++) {\r\n        output[x] = new Array(image1.getHeight());\r\n        for (var y = 0; y < image1.getHeight(); y++) {\r\n            var angle = Math.atan2(image1.r[x][y], image2.r[x][y]) * 180 / Math.PI;\r\n            output[x][y] = angle;\r\n        }\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * This function preserves local maxima and discards all other pixels to ensure edges are no thicker than one pixel\r\n * @param image The edge gradients\r\n * @param angles The edge angles\r\n */\r\nfunction edgeThinning(image, angles) {\r\n    var result = RGBImage_1.RGBImage.fromDimensions(image.getWidth(), image.getHeight());\r\n    for (var x = 0; x < image.getWidth(); x++) {\r\n        for (var y = 0; y < image.getHeight(); y++) {\r\n            var angle = angles[x][y];\r\n            if (angle < 22.5) {\r\n                if (image.r[x][y] == Math.max(image.r[(x + 1) % image.getWidth()][y], image.r[Math.abs(x - 1)][y], image.r[x][y])) {\r\n                    result.r[x][y] = result.g[x][y] = result.b[x][y] = image.r[x][y];\r\n                }\r\n                else {\r\n                    result.r[x][y] = result.g[x][y] = result.b[x][y] = 0;\r\n                }\r\n            }\r\n            else if (angle < 67.5) {\r\n                if (image.r[x][y] == Math.max(image.r[x][y], image.r[(x + 1) % image.getWidth()][(y + 1) % image.getHeight()], image.r[Math.abs(x - 1)][Math.abs(y - 1)])\r\n                    || image.r[x][y] == Math.max(image.r[x][y], image.r[(x + 1) % image.getWidth()][Math.abs(y - 1)], image.r[Math.abs(x - 1)][(y + 1) % image.getHeight()])) {\r\n                    result.r[x][y] = result.g[x][y] = result.b[x][y] = image.r[x][y];\r\n                }\r\n                else {\r\n                    result.r[x][y] = result.g[x][y] = result.b[x][y] = 0;\r\n                }\r\n            }\r\n            else {\r\n                if (image.r[x][y] == Math.max(image.r[x][(y + 1) % image.getHeight()], image.r[x][Math.abs(y - 1)], image.r[x][y])) {\r\n                    result.r[x][y] = result.g[x][y] = result.b[x][y] = image.r[x][y];\r\n                }\r\n                else {\r\n                    result.r[x][y] = result.g[x][y] = result.b[x][y] = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Performs dual thresholding for canny edge detection. All pixels above the upper threshold are preserved, all remaining pixels above the lower threshold are marked as weak edges, and all other pixels are discarded.\r\n * @param image\r\n * @param threshold1\r\n * @param threshold2\r\n */\r\nfunction dualThresholding(image, threshold1, threshold2) {\r\n    var strengths = new Array(image.getWidth());\r\n    var upper = Math.max(threshold1, threshold2);\r\n    var lower = Math.min(threshold1, threshold2);\r\n    for (var x = 0; x < image.getWidth(); x++) {\r\n        strengths[x] = new Array(image.getHeight());\r\n        for (var y = 0; y < image.getHeight(); y++) {\r\n            if (image.r[x][y] > upper) {\r\n                strengths[x][y] = EdgeStrength.STRONG_EDGE;\r\n            }\r\n            else if (image.r[x][y] > lower) {\r\n                strengths[x][y] = EdgeStrength.WEAK_EDGE;\r\n            }\r\n            else {\r\n                strengths[x][y] = EdgeStrength.NO_EDGE;\r\n            }\r\n        }\r\n    }\r\n    return strengths;\r\n}\r\n/**\r\n * Performs hysteresis for canny edge detection. All pixels that are marked as strong edges are automatically included in the output, all weak edges are preserved in the output if and only if at least one of their 8 immediately neighbouring pixels is a strong edge\r\n * @param strengths\r\n */\r\nfunction hysteresis(strengths) {\r\n    var width = strengths.length;\r\n    var height = strengths[0].length;\r\n    var output = RGBImage_1.RGBImage.fromDimensions(width, height);\r\n    for (var x = 0; x < width; x++) {\r\n        for (var y = 0; y < height; y++) {\r\n            switch (strengths[x][y]) {\r\n                case EdgeStrength.STRONG_EDGE:\r\n                    output.r[x][y] = output.g[x][y] = output.b[x][y] = 255;\r\n                    break;\r\n                case EdgeStrength.WEAK_EDGE:\r\n                    // blob analysis\r\n                    var isEdge = false;\r\n                    var val = 0;\r\n                    for (var blobx = x - 1; blobx <= x + 1; blobx++) {\r\n                        for (var bloby = y - 1; bloby <= y + 1; bloby++) {\r\n                            if (strengths[Math.abs(blobx) % width][Math.abs(bloby) % height] === EdgeStrength.STRONG_EDGE) {\r\n                                isEdge = true;\r\n                                val = 255;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (isEdge) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    output.r[x][y] = output.g[x][y] = output.b[x][y] = val;\r\n                    break;\r\n                default:\r\n                    output.r[x][y] = output.g[x][y] = output.b[x][y] = 0;\r\n            }\r\n        }\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Performs canny edge detection on an image.\r\n * @param image the image\r\n * @param threshold1 the first threshold\r\n * @param threshold2 the second threshold\r\n */\r\nfunction getCannyEdges(image, threshold1, threshold2) {\r\n    image = image.greyScale();\r\n    var blurred = convolve1d(image, exports.gauss1d);\r\n    var gx = greyscaleConvolve(blurred, exports.sobelX, 3, 3);\r\n    var gy = greyscaleConvolve(blurred, exports.sobelY, 3, 3);\r\n    var intensity = combineConvolutions(gx, gy);\r\n    var directions = computeEdgeAngles(gx, gy);\r\n    var thinnedEdges = edgeThinning(intensity, directions);\r\n    var thresholded = dualThresholding(thinnedEdges, threshold1, threshold2);\r\n    return hysteresis(thresholded);\r\n}\r\nexports.getCannyEdges = getCannyEdges;\r\n//# sourceMappingURL=vision.js.map","\"use strict\";\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Vision = __importStar(require(\"./vision\"));\r\nvar MovingAverageBackgroundSubtractor = /** @class */ (function () {\r\n    function MovingAverageBackgroundSubtractor(size) {\r\n        this.buffer = new DLinkedList();\r\n        this.capacity = size;\r\n        this.currentBackground = null;\r\n    }\r\n    MovingAverageBackgroundSubtractor.prototype.addFrame = function (image) {\r\n        var size = this.buffer.getSize();\r\n        if (this.currentBackground == null) {\r\n            this.currentBackground = image;\r\n            this.buffer.add(image);\r\n        }\r\n        else {\r\n            var tempModel = void 0;\r\n            if (this.buffer.getSize() < this.capacity) {\r\n                tempModel = Vision.RGBImage.clone(this.currentBackground);\r\n                for (var x = 0; x < image.getWidth(); x++) {\r\n                    for (var y = 0; y < image.getHeight(); y++) {\r\n                        tempModel.r[x][y] *= size;\r\n                        tempModel.g[x][y] *= size;\r\n                        tempModel.b[x][y] *= size;\r\n                        tempModel.r[x][y] += image.r[x][y];\r\n                        tempModel.g[x][y] += image.g[x][y];\r\n                        tempModel.b[x][y] += image.b[x][y];\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                tempModel = Vision.RGBImage.clone(this.currentBackground);\r\n                var toRemove = this.buffer.removeFirstNode();\r\n                for (var x = 0; x < image.getWidth(); x++) {\r\n                    for (var y = 0; y < image.getHeight(); y++) {\r\n                        tempModel.r[x][y] *= size;\r\n                        tempModel.g[x][y] *= size;\r\n                        tempModel.b[x][y] *= size;\r\n                        tempModel.r[x][y] -= toRemove.r[x][y];\r\n                        tempModel.g[x][y] -= toRemove.g[x][y];\r\n                        tempModel.b[x][y] -= toRemove.b[x][y];\r\n                        tempModel.r[x][y] += image.r[x][y];\r\n                        tempModel.g[x][y] += image.g[x][y];\r\n                        tempModel.b[x][y] += image.b[x][y];\r\n                    }\r\n                }\r\n            }\r\n            this.buffer.add(image);\r\n            for (var x = 0; x < image.getWidth(); x++) {\r\n                for (var y = 0; y < image.getHeight(); y++) {\r\n                    tempModel.r[x][y] /= this.buffer.getSize();\r\n                    tempModel.g[x][y] /= this.buffer.getSize();\r\n                    tempModel.b[x][y] /= this.buffer.getSize();\r\n                }\r\n            }\r\n            this.currentBackground = tempModel;\r\n        }\r\n    };\r\n    MovingAverageBackgroundSubtractor.prototype.getBackgroundModel = function () {\r\n        return this.currentBackground;\r\n    };\r\n    MovingAverageBackgroundSubtractor.prototype.setBufferSize = function (num) {\r\n        if (num > this.buffer.getSize()) {\r\n            this.capacity = num;\r\n        }\r\n        else {\r\n            this.capacity = num;\r\n            while (this.buffer.getSize() > this.capacity) {\r\n                this.buffer.removeFirstNode();\r\n            }\r\n            this.recalculateBackgroundModel();\r\n        }\r\n    };\r\n    MovingAverageBackgroundSubtractor.prototype.recalculateBackgroundModel = function () {\r\n        var iter = new DLinkedListIterator(this.buffer);\r\n        var background = Vision.RGBImage.fromDimensions(this.currentBackground.getWidth(), this.currentBackground.getHeight());\r\n        while (iter.hasNext()) {\r\n            var frame = iter.next();\r\n            for (var x = 0; x < this.currentBackground.getWidth(); x++) {\r\n                for (var y = 0; y < this.currentBackground.getHeight(); y++) {\r\n                    background.r[x][y] += frame.r[x][y];\r\n                    background.g[x][y] += frame.g[x][y];\r\n                    background.b[x][y] += frame.b[x][y];\r\n                }\r\n            }\r\n        }\r\n        for (var x = 0; x < this.currentBackground.getWidth(); x++) {\r\n            for (var y = 0; y < this.currentBackground.getHeight(); y++) {\r\n                background.r[x][y] = background.r[x][y] / this.buffer.getSize();\r\n                background.g[x][y] = background.g[x][y] / this.buffer.getSize();\r\n                background.b[x][y] = background.b[x][y] / this.buffer.getSize();\r\n            }\r\n        }\r\n    };\r\n    return MovingAverageBackgroundSubtractor;\r\n}());\r\nexports.MovingAverageBackgroundSubtractor = MovingAverageBackgroundSubtractor;\r\nvar DLinkedListIterator = /** @class */ (function () {\r\n    function DLinkedListIterator(buf) {\r\n        this.currentNode = buf.getFirstNode();\r\n    }\r\n    DLinkedListIterator.prototype.hasNext = function () {\r\n        return this.currentNode.next != null && this.currentNode.next != undefined;\r\n    };\r\n    DLinkedListIterator.prototype.next = function () {\r\n        var res = this.currentNode.data;\r\n        this.currentNode = this.currentNode.next;\r\n        return res;\r\n    };\r\n    return DLinkedListIterator;\r\n}());\r\nvar DLinkedList = /** @class */ (function () {\r\n    function DLinkedList() {\r\n        this.size = 0;\r\n    }\r\n    DLinkedList.prototype.add = function (obj) {\r\n        if (this.size == 0) {\r\n            this.first = new Node(obj);\r\n            this.last = this.first;\r\n        }\r\n        else {\r\n            this.last.next = new Node(obj);\r\n            this.last.next.previous = this.last;\r\n            this.last = this.last.next;\r\n        }\r\n        this.size++;\r\n    };\r\n    DLinkedList.prototype.removeFirstNode = function () {\r\n        var result = this.first.data;\r\n        this.first = this.first.next;\r\n        this.first.previous.next = null;\r\n        this.first.previous = null;\r\n        this.size--;\r\n        return result;\r\n    };\r\n    DLinkedList.prototype.removeLastNode = function () {\r\n        var result = this.last.data;\r\n        this.last = this.last.previous;\r\n        this.last.next.previous = null;\r\n        this.last.next = null;\r\n        this.size--;\r\n        return result;\r\n    };\r\n    DLinkedList.prototype.getFirstNode = function () {\r\n        return this.first;\r\n    };\r\n    DLinkedList.prototype.getLastNode = function () {\r\n        return this.last;\r\n    };\r\n    DLinkedList.prototype.getSize = function () {\r\n        return this.size;\r\n    };\r\n    return DLinkedList;\r\n}());\r\nvar Node = /** @class */ (function () {\r\n    function Node(obj) {\r\n        this.data = obj;\r\n        this.previous = null;\r\n        this.next = null;\r\n    }\r\n    return Node;\r\n}());\r\n//# sourceMappingURL=MovingAverageBackgroundSubtraction.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RGBImage = /** @class */ (function () {\r\n    function RGBImage() {\r\n        // Intentionally blank and private. Use the static constructors. This is done because\r\n        // typescript doesn't allow constructor overloading. To instantiate and RGBImage,\r\n        // instead of using \r\n        //     new RGBImage(...);\r\n        // use\r\n        //     RGBImage.fromDimensions();\r\n        // or\r\n        //     RGBImage.fromImageData();\r\n    }\r\n    RGBImage.getIndex = function (x, y, width, height) {\r\n        return (width * y) + x;\r\n    };\r\n    /**\r\n     * Constructor to initialise a blank image from given dimensions\r\n     * @param width width of the image\r\n     * @param height height of the image\r\n     */\r\n    RGBImage.fromDimensions = function (width, height) {\r\n        var result = new RGBImage();\r\n        result.width = width;\r\n        result.height = height;\r\n        result.r = new Array(width);\r\n        result.g = new Array(width);\r\n        result.b = new Array(height);\r\n        for (var x = 0; x < width; x++) {\r\n            result.r[x] = new Array(height);\r\n            result.g[x] = new Array(height);\r\n            result.b[x] = new Array(height);\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Constructor to initialise an image from Javascript's ImageData class\r\n     * @param image\r\n     */\r\n    RGBImage.fromImageData = function (image) {\r\n        var result = new RGBImage();\r\n        result.width = image.width;\r\n        result.height = image.height;\r\n        result.r = new Array(result.width);\r\n        result.g = new Array(result.width);\r\n        result.b = new Array(result.width);\r\n        for (var x = 0; x < result.width; x++) {\r\n            result.r[x] = new Array(result.height);\r\n            result.g[x] = new Array(result.height);\r\n            result.b[x] = new Array(result.height);\r\n            for (var y = 0; y < result.height; y++) {\r\n                var index = RGBImage.getIndex(x, y, result.width, result.height) * 4;\r\n                result.r[x][y] = image.data[index++];\r\n                result.g[x][y] = image.data[index++];\r\n                result.b[x][y] = image.data[index];\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Returns a copy of this image\r\n     * @param image\r\n     */\r\n    RGBImage.clone = function (image) {\r\n        var result = new RGBImage();\r\n        result.width = image.width;\r\n        result.height = image.height;\r\n        result.r = new Array(result.width);\r\n        result.g = new Array(result.width);\r\n        result.b = new Array(result.width);\r\n        for (var x = 0; x < result.width; x++) {\r\n            result.r[x] = new Array(result.height);\r\n            result.g[x] = new Array(result.height);\r\n            result.b[x] = new Array(result.height);\r\n            for (var y = 0; y < result.height; y++) {\r\n                result.r[x][y] = image.r[x][y];\r\n                result.g[x][y] = image.g[x][y];\r\n                result.b[x][y] = image.b[x][y];\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Returns the image's width\r\n     */\r\n    RGBImage.prototype.getWidth = function () {\r\n        return this.width;\r\n    };\r\n    /**\r\n     * Returns the image's height\r\n     */\r\n    RGBImage.prototype.getHeight = function () {\r\n        return this.height;\r\n    };\r\n    /**\r\n     * Returns the image in Javascript's ImageData format.\r\n     */\r\n    RGBImage.prototype.asImageData = function () {\r\n        var result = new ImageData(this.width, this.height);\r\n        for (var x = 0; x < this.width; x++) {\r\n            for (var y = 0; y < this.height; y++) {\r\n                var index = RGBImage.getIndex(x, y, this.width, this.height) * 4;\r\n                result.data[index++] = this.r[x][y];\r\n                result.data[index++] = this.g[x][y];\r\n                result.data[index++] = this.b[x][y];\r\n                result.data[index] = 255;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Draws this image on a canvas\r\n     * @param canvas the canvas on which the image is to be drawn\r\n     */\r\n    RGBImage.prototype.draw = function (canvas) {\r\n        var data = this.asImageData();\r\n        canvas.getContext('2d').putImageData(data, 0, 0);\r\n    };\r\n    /**\r\n     * Returns a greyscaled copy of this image.\r\n     */\r\n    RGBImage.prototype.greyScale = function () {\r\n        var result = RGBImage.fromDimensions(this.width, this.height);\r\n        for (var x = 0; x < result.width; x++) {\r\n            for (var y = 0; y < result.height; y++) {\r\n                var avg = (this.r[x][y] + this.g[x][y] + this.b[x][y]) / 3;\r\n                result.r[x][y] = result.g[x][y] = result.b[x][y] = avg;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    return RGBImage;\r\n}());\r\nexports.RGBImage = RGBImage;\r\n//# sourceMappingURL=RGBImage.js.map","\"use strict\";\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Vision = __importStar(require(\"../vision\"));\r\nvar animating = false;\r\nfunction computeFrame() {\r\n    var inputImage = Vision.getImageFromVideo(document.getElementById('webcam'), document.getElementById('camfeed'));\r\n    var output = Vision.getCannyEdges(inputImage, +document.getElementById('lowerThreshold').value, +document.getElementById('upperThreshold').value);\r\n    output.draw(document.getElementById('cannyoutput'));\r\n    if (animating) {\r\n        requestAnimationFrame(computeFrame);\r\n    }\r\n}\r\ndocument.getElementById('stopBtn').addEventListener('click', function (event) {\r\n    animating = false;\r\n});\r\ndocument.getElementById('startBtn').addEventListener('click', function (event) {\r\n    animating = true;\r\n    computeFrame();\r\n});\r\nVision.initCamera();\r\n//# sourceMappingURL=canny.js.map"],"sourceRoot":""}